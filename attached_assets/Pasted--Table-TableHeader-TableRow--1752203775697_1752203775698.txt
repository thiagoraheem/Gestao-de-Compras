<Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Descrição</TableHead>
                        <TableHead>Qtd</TableHead>
                        <TableHead>Unidade</TableHead>
                        <TableHead>Preço Unitário</TableHead>
                        <TableHead>Total</TableHead>
                        <TableHead>Prazo (dias)</TableHead>
                        <TableHead>Marca</TableHead>
                        <TableHead>Modelo</TableHead>
                        <TableHead>Observações</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {quotationItems.map((item, index) => (
                        <TableRow key={item.id}>
                          <TableCell>
                            <div className="max-w-48">
                              <p className="text-sm font-medium">
                                {item.description}
                              </p>
                              {item.specifications && (
                                <p className="text-xs text-gray-500 mt-1">
                                  {item.specifications}
                                </p>
                              )}
                            </div>
                          </TableCell>
                          <TableCell>
                            <Badge variant="secondary">
                              {parseFloat(item.quantity).toLocaleString(
                                "pt-BR",
                                { maximumFractionDigits: 0 },
                              )}
                            </Badge>
                          </TableCell>
                          <TableCell>{item.unit}</TableCell>
                          <TableCell>
                            <FormField
                              control={form.control}
                              name={`items.${index}.unitPrice`}
                              render={({ field }) => (
                                <FormItem>
                                  <FormControl>
                                    <Input
                                      {...field}
                                      placeholder="1.000,00"
                                      className="w-24"
                                      onChange={(e) => {
                                        // Allow natural number input - user types 1000 and it becomes 1000.00
                                        let inputValue = e.target.value;

                                        // If user is typing a number without formatting, keep it as is for now
                                        if (/^\d+$/.test(inputValue)) {
                                          field.onChange(inputValue);
                                        } else {
                                          // If already formatted or contains special chars, clean it
                                          const cleanValue = inputValue.replace(
                                            /[^\d.,]/g,
                                            "",
                                          );
                                          field.onChange(cleanValue);
                                        }
                                      }}
                                      onBlur={(e) => {
                                        // Format on blur for better display
                                        const value = e.target.value;
                                        if (value) {
                                          let number;
                                          // If it's a simple number (like 1000), treat it as currency value
                                          if (/^\d+$/.test(value)) {
                                            number = parseFloat(value);
                                          } else if (
                                            /^\d+[.,]\d+$/.test(value)
                                          ) {
                                            // If it already has decimal places
                                            number = parseFloat(
                                              value.replace(",", "."),
                                            );
                                          } else {
                                            // Try to parse any formatted value
                                            const cleanValue = value.replace(
                                              /[^\d.,]/g,
                                              "",
                                            );
                                            number = parseFloat(
                                              cleanValue.replace(",", "."),
                                            );
                                          }

                                          if (!isNaN(number)) {
                                            const formatted =
                                              number.toLocaleString("pt-BR", {
                                                minimumFractionDigits: 2,
                                                maximumFractionDigits: 2,
                                              });
                                            field.onChange(formatted);
                                          }
                                        }
                                      }}
                                    />
                                  </FormControl>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />
                          </TableCell>
                          <TableCell>
                            <div className="font-medium text-green-600">
                              R${" "}
                              {(() => {
                                const unitPrice = form.watch(
                                  `items.${index}.unitPrice`,
                                );
                                if (!unitPrice) return "0,00";

                                const quantity = parseFloat(item.quantity);
                                const price =
                                  parseNumberFromCurrency(unitPrice);
                                const total = quantity * price;

                                return isNaN(total)
                                  ? "0,00"
                                  : total.toLocaleString("pt-BR", {
                                      minimumFractionDigits: 2,
                                      maximumFractionDigits: 2,
                                    });
                              })()}
                            </div>
                          </TableCell>
                          <TableCell>
                            <FormField
                              control={form.control}
                              name={`items.${index}.deliveryDays`}
                              render={({ field }) => (
                                <FormItem>
                                  <FormControl>
                                    <Input
                                      {...field}
                                      placeholder="30"
                                      type="number"
                                      className="w-20"
                                    />
                                  </FormControl>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />
                          </TableCell>
                          <TableCell>
                            <FormField
                              control={form.control}
                              name={`items.${index}.brand`}
                              render={({ field }) => (
                                <FormItem>
                                  <FormControl>
                                    <Input
                                      {...field}
                                      placeholder="Marca"
                                      className="w-24"
                                    />
                                  </FormControl>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />
                          </TableCell>
                          <TableCell>
                            <FormField
                              control={form.control}
                              name={`items.${index}.model`}
                              render={({ field }) => (
                                <FormItem>
                                  <FormControl>
                                    <Input
                                      {...field}
                                      placeholder="Modelo"
                                      className="w-24"
                                    />
                                  </FormControl>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />
                          </TableCell>
                          <TableCell>
                            <FormField
                              control={form.control}
                              name={`items.${index}.observations`}
                              render={({ field }) => (
                                <FormItem>
                                  <FormControl>
                                    <Input
                                      {...field}
                                      placeholder="Observações"
                                      className="w-32"
                                    />
                                  </FormControl>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>